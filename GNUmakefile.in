# GNUmakefile.in: Project's makefile template.
# Copyright (C) 2023-2024 streaksu
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Nuke built-in rules and variables.
MAKEFLAGS += -rR
.SUFFIXES:

# Macros to make our build system still work from within paths with spaces
# or other special characters.
override SPACE := $(subst ,, )
override MKESCAPE = $(subst $(SPACE),\ ,$(1))
override SHESCAPE = $(subst ','\'',$(1))

# Import some autoconf variables as make variables.
override SRCDIR := @SRCDIR@
override PACKAGE_VERSION := @PACKAGE_VERSION@
override PACKAGE_TARNAME := @PACKAGE_TARNAME@
override OUTPUT := bin/$(PACKAGE_TARNAME)
override DIST_OUTPUT := $(PACKAGE_TARNAME)-$(PACKAGE_VERSION)
override WERROR_FLAG := @WERROR_FLAG@
override PKGCONF_CFLAGS := @PKGCONF_CFLAGS@
override PKGCONF_CPPFLAGS := @PKGCONF_CPPFLAGS@
override PKGCONF_LIBS := @PKGCONF_LIBS@

# Import autoconf variables that we allow the user to override.
CC := @CC@
CFLAGS := @CFLAGS@
CPPFLAGS := @CPPFLAGS@
LDFLAGS := @LDFLAGS@
LIBS := @LIBS@
STRIP := @STRIP@
MKDIR_P := @MKDIR_P@
INSTALL := @INSTALL@
INSTALL_PROGRAM := @INSTALL_PROGRAM@
prefix := @prefix@
exec_prefix := @exec_prefix@
bindir := @bindir@

# Internal C flags that should not be changed by the user.
override CFLAGS += \
    -Wall \
    -Wextra \
    $(WERROR_FLAG) \
    -std=gnu11 \
    $(PKGCONF_CFLAGS)

# Internal C preprocessor flags that should not be changed by the user.
override CPPFLAGS := \
    -I'$(call SHESCAPE,$(SRCDIR))/src' \
    $(PKGCONF_CPPFLAGS) \
    $(CPPFLAGS) \
    -DPACKAGE_VERSION=\"$(PACKAGE_VERSION)\"

# Internal libraries that should not be changed by the user.
override LIBS += \
    $(PKGCONF_LIBS)

# Default target.
.PHONY: all
all: bin/blkid bin/cpuinfo bin/dmesg bin/execmac bin/ifconfig bin/ipcrm bin/ipcs bin/logger bin/login \
	bin/lp bin/lsclocks bin/lspci bin/mount bin/newgrp bin/pivot_root bin/ps bin/renice \
	bin/showmem bin/strace bin/su bin/umount bin/watch bin/dumper

bin/blkid: $(call MKESCAPE,$(SRCDIR))/src/blkid.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/cpuinfo: $(call MKESCAPE,$(SRCDIR))/src/cpuinfo.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/dmesg: $(call MKESCAPE,$(SRCDIR))/src/dmesg.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/dumper: $(call MKESCAPE,$(SRCDIR))/src/dumper.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/execmac: $(call MKESCAPE,$(SRCDIR))/src/execmac.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/ifconfig: $(call MKESCAPE,$(SRCDIR))/src/ifconfig.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/ipcrm: $(call MKESCAPE,$(SRCDIR))/src/ipcrm.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/ipcs: $(call MKESCAPE,$(SRCDIR))/src/ipcs.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/logger: $(call MKESCAPE,$(SRCDIR))/src/logger.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/login: $(call MKESCAPE,$(SRCDIR))/src/login.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' -lgcrypt $(LIBS) -o $@

bin/lp: $(call MKESCAPE,$(SRCDIR))/src/lp.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/lsclocks: $(call MKESCAPE,$(SRCDIR))/src/lsclocks.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/lspci: $(call MKESCAPE,$(SRCDIR))/src/lspci.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/mount: $(call MKESCAPE,$(SRCDIR))/src/mount.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/newgrp: $(call MKESCAPE,$(SRCDIR))/src/newgrp.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/pivot_root: $(call MKESCAPE,$(SRCDIR))/src/pivot_root.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/ps: $(call MKESCAPE,$(SRCDIR))/src/ps.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/renice: $(call MKESCAPE,$(SRCDIR))/src/renice.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/showmem: $(call MKESCAPE,$(SRCDIR))/src/showmem.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/strace: $(call MKESCAPE,$(SRCDIR))/src/strace.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/su: $(call MKESCAPE,$(SRCDIR))/src/su.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/umount: $(call MKESCAPE,$(SRCDIR))/src/umount.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

bin/watch: $(call MKESCAPE,$(SRCDIR))/src/watch.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$<)' $(LIBS) -o $@

# Remove object files and the final executable.
.PHONY: clean
clean:
	rm -rf bin

# Remove files generated by configure.
.PHONY: distclean
distclean: clean
	rm -rf config.log config.status GNUmakefile

# Remove ALL generated files.
.PHONY: maintainer-clean
maintainer-clean: distclean
	cd '$(call SHESCAPE,$(SRCDIR))' && rm -rf configure build-aux *'~' autom4te.cache aclocal.m4

# Create a release tarball.
.PHONY: dist
dist:
	rm -rf "$(DIST_OUTPUT)"
	$(MKDIR_P) "$(DIST_OUTPUT)"
	cp -rp '$(call SHESCAPE,$(SRCDIR))'/.git "$(DIST_OUTPUT)"/
	cd "$(DIST_OUTPUT)" && git checkout .
	cd "$(DIST_OUTPUT)" && ./bootstrap
	rm -rf "$(DIST_OUTPUT)"/.git
	rm -rf "$(DIST_OUTPUT)"/.gitignore
	rm -rf "$(DIST_OUTPUT)"/.github
	rm -rf "$(DIST_OUTPUT)"/autom4te.cache
	echo "$(PACKAGE_VERSION)" >"$(DIST_OUTPUT)"/version
	tar -cf "$(DIST_OUTPUT).tar" "$(DIST_OUTPUT)"
	gzip < "$(DIST_OUTPUT).tar" > "$(DIST_OUTPUT).tar.gz"
	( bzip2 < "$(DIST_OUTPUT).tar" > "$(DIST_OUTPUT).tar.bz2" || rm "$(DIST_OUTPUT).tar.bz2" )
	( xz < "$(DIST_OUTPUT).tar" > "$(DIST_OUTPUT).tar.xz" || rm "$(DIST_OUTPUT).tar.xz" )
	rm "$(DIST_OUTPUT).tar"
	rm -rf "$(DIST_OUTPUT)"

# Install files and executables to the final locations.
.PHONY: install
install: all
	$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(bindir))'
	for f in blkid cpuinfo dumper execmac ifconfig ipcrm ipcs dmesg logger login lp lsclocks \
			lspci mount newgrp pivot_root ps renice showmem strace su umount watch; do \
		$(INSTALL_PROGRAM) bin/$$f '$(call SHESCAPE,$(DESTDIR)$(bindir))/'; \
	done

# Install and strip executables.
.PHONY: install-strip
install-strip: install
	for f in blkid cpuinfo dumper execmac ifconfig ipcrm ipcs dmesg logger login lp lsclocks \
			lspci mount newgrp pivot_root ps renice showmem strace su umount watch; do \
		$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/$$f; \
	done

# Uninstall previously installed files and executables.
.PHONY: uninstall
uninstall:
	for f in blkid cpuinfo dumper execmac ifconfig ipcrm ipcs dmesg logger login lp lsclocks \
			lspci mount newgrp pivot_root ps renice showmem strace su umount watch; do \
		rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/$$f; \
	done
