# GNUmakefile.in: Project's makefile template.
# Copyright (C) 2023 streaksu
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Nuke built-in rules and variables
override MAKEFLAGS += -rR

# Misc autoconf variable imports.
override SRCDIR := @SRCDIR@
override BUILDDIR := @BUILDDIR@
override PACKAGE_VERSION := @PACKAGE_VERSION@
override PACKAGE_TARNAME := @PACKAGE_TARNAME@
override OUTPUT := bin/$(PACKAGE_TARNAME)

# Autoconf dir variables.
override prefix := @prefix@
override exec_prefix := @exec_prefix@
override bindir := @bindir@

# Macros to make our build system still work from within paths with spaces
# or other special characters.
override SPACE := $(subst ,, )
MKESCAPE = $(subst $(SPACE),\ ,$(1))
SHESCAPE = $(subst ','\'',$(1))
OBJESCAPE = $(subst .a ,.a' ',$(subst .o ,.o' ',$(call SHESCAPE,$(1))))

# File lists.
override CFILES := $(shell cd '$(call SHESCAPE,$(SRCDIR))' && find . -type f -name '*.c')
override OBJ := $(addprefix $(call MKESCAPE,$(BUILDDIR))/,$(CFILES:.c=.o))
override HEADER_DEPS := $(CFILES:.c=.d)

# DEFAULT_VAR definition.
define DEFAULT_VAR =
    ifeq ($(origin $1),default)
        override $(1) := $(2)
    endif
    ifeq ($(origin $1),undefined)
        override $(1) := $(2)
    endif
endef

# Generator executables.
$(eval $(call DEFAULT_VAR,CC,@CC@))
override NATIVE_STRIP := @NATIVE_STRIP@
override MKDIR_P := @MKDIR_P@
override INSTALL := @INSTALL@
override INSTALL_PROGRAM := @INSTALL_PROGRAM@
override LN_S := @LN_S@

# User command flags.
CFLAGS ?= @CFLAGS@
CPPFLAGS ?= @CPPFLAGS@
LDFLAGS ?= @LDFLAGS@
LIBS ?= @LIBS@

# Needed command flags.
override CFLAGS += \
    -std=gnu11

override CPPFLAGS := \
    -I'$(call SHESCAPE,$(SRCDIR))/source' \
    $(CPPFLAGS) \
    -DPACKAGE_VERSION=\"$(PACKAGE_VERSION)\"

# Targets.
.PHONY: all
all: bin/cpuinfo bin/execmac bin/ifconfig bin/klog bin/logger bin/login bin/lp \
	bin/lslocks bin/mount bin/newgrp bin/ps bin/renice bin/showmem bin/strace \
	bin/su bin/umount bin/uptime bin/watch

bin/cpuinfo:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/cpuinfo.c $(LIBS) -o $@

bin/execmac:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/execmac.c $(LIBS) -o $@

bin/ifconfig:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/ifconfig.c $(LIBS) -o $@

bin/klog:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/klog.c $(LIBS) -o $@

bin/logger:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/logger.c $(LIBS) -o $@

bin/login:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/login.c $(LIBS) -o $@

bin/lp:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/lp.c $(LIBS) -o $@

bin/lslocks:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/lslocks.c $(LIBS) -o $@

bin/mount:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/mount.c $(LIBS) -o $@

bin/newgrp:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/newgrp.c $(LIBS) -o $@

bin/ps:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/ps.c $(LIBS) -o $@

bin/renice:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/renice.c $(LIBS) -o $@

bin/showmem:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/showmem.c $(LIBS) -o $@

bin/strace:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/strace.c $(LIBS) -o $@

bin/su:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/su.c $(LIBS) -o $@

bin/umount:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/umount.c $(LIBS) -o $@

bin/uptime:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/uptime.c $(LIBS) -o $@

bin/watch:
	$(MKDIR_P) bin
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(call MKESCAPE,$(SRCDIR))/source/watch.c $(LIBS) -o $@

# Remove object files and the final executable.
.PHONY: clean
clean:
	rm -rf bin/cpuinfo bin/execmac bin/ifconfig bin/klog bin/login bin/mount bin/ps \
	bin/showmem bin/strace bin/su bin/umount bin/uptime bin/watch
	rm -rf bin

# Remove files generated by configure.
.PHONY: distclean
distclean: clean
	rm -rf config.log config.status GNUmakefile

# Create a release tarball.
.PHONY: dist
dist:
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	$(MKDIR_P) "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	cp -rp '$(call SHESCAPE,$(SRCDIR))'/.git "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/
	cd "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)" && git checkout .
	cd "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)" && ./bootstrap
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.git
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.gitignore
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.github
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/autom4te.cache
	echo "$(PACKAGE_VERSION)" >"$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/version
	tar -Jcf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)".tar.xz "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	tar -zcf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)".tar.gz "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"

# Remove ALL generated files.
.PHONY: maintainer-clean
maintainer-clean: distclean
	cd '$(call SHESCAPE,$(SRCDIR))' && rm -rf configure build-aux *'~' autom4te.cache

# Install files and executables to the final locations.
.PHONY: install
install: all
	$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(bindir))'
	$(INSTALL_PROGRAM) bin/cpuinfo '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/execmac '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/ifconfig '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/klog '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/logger '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/login '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/lp '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/lslocks '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/mount '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/newgrp '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/ps '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/renice '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/showmem '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/strace '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/su '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/umount '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/uptime '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/watch '$(call SHESCAPE,$(DESTDIR)$(bindir))/'

# Install and strip executables.
.PHONY: install-strip
install-strip: install
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/cpuinfo
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/execmac
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ifconfig
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/klog
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/logger
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/login
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/lp
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/lslocks
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/mount
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/newgrp
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ps
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/renice
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/showmem
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/strace
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/su
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/umount
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/uptime
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/watch

# Uninstall previously installed files and executables.
.PHONY: uninstall
uninstall:
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/cpuinfo
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/execmac
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ifconfig
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/klog
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/logger
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/login
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/lp
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/lslocks
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/mount
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/newgrp
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ps
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/renice
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/showmem
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/strace
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/su
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/umount
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/uptime
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/watch
