# GNUmakefile.in: Project's makefile template.
# Copyright (C) 2023-2024 streaksu
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Nuke built-in rules and variables.
override MAKEFLAGS += -rR

# Convenience macro to reliably declare user overridable variables.
define DEFAULT_VAR =
    ifeq ($(origin $1),default)
        override $(1) := $(2)
    endif
    ifeq ($(origin $1),undefined)
        override $(1) := $(2)
    endif
endef

# Import some autoconf variables as make variables.
# Those beginning with DEFAULT_ are user overridable.
override SRCDIR := @SRCDIR@
override PACKAGE_VERSION := @PACKAGE_VERSION@
override PACKAGE_TARNAME := @PACKAGE_TARNAME@
override OUTPUT := bin/$(PACKAGE_TARNAME)
override WERROR_FLAG := @WERROR_FLAG@
override DEFAULT_CC := @CC@
$(eval $(call DEFAULT_VAR,CC,$(DEFAULT_CC)))
override DEFAULT_CFLAGS := @CFLAGS@
$(eval $(call DEFAULT_VAR,CFLAGS,$(DEFAULT_CFLAGS)))
override PKGCONF_CFLAGS := @PKGCONF_CFLAGS@
override DEFAULT_CPPFLAGS := @CPPFLAGS@
$(eval $(call DEFAULT_VAR,CPPFLAGS,$(DEFAULT_CPPFLAGS)))
override PKGCONF_CPPFLAGS := @PKGCONF_CPPFLAGS@
override DEFAULT_LDFLAGS := @LDFLAGS@
$(eval $(call DEFAULT_VAR,LDFLAGS,$(DEFAULT_LDFLAGS)))
override DEFAULT_LIBS := @LIBS@
$(eval $(call DEFAULT_VAR,LIBS,$(DEFAULT_LIBS)))
override PKGCONF_LIBS := @PKGCONF_LIBS@
override STRIP := @STRIP@
override MKDIR_P := @MKDIR_P@
override INSTALL := @INSTALL@
override INSTALL_PROGRAM := @INSTALL_PROGRAM@
override LN_S := @LN_S@
override prefix := @prefix@
override exec_prefix := @exec_prefix@
override bindir := @bindir@

# Macros to make our build system still work from within paths with spaces
# or other special characters.
override SPACE := $(subst ,, )
MKESCAPE = $(subst $(SPACE),\ ,$(1))
SHESCAPE = $(subst ','\'',$(1))

# Internal C flags that should not be changed by the user.
override CFLAGS += \
    -Wall \
    -Wextra \
    $(WERROR_FLAG) \
    -std=gnu11 \
    $(PKGCONF_CFLAGS)

# Internal C preprocessor flags that should not be changed by the user.
override CPPFLAGS := \
    $(PKGCONF_CPPFLAGS) \
    -I'$(call SHESCAPE,$(SRCDIR))/src' \
    $(CPPFLAGS) \
    -DPACKAGE_VERSION=\"$(PACKAGE_VERSION)\"

# Internal library flags that should not be changed by the user.
override LIBS += \
    $(PKGCONF_LIBS)

# Default target.
.PHONY: all
all: bin/cpuinfo bin/execmac bin/ifconfig bin/ipcrm bin/ipcs bin/klog bin/logger bin/login \
	bin/lp bin/lslocks bin/mount bin/newgrp bin/ps bin/renice bin/showmem bin/strace \
	bin/su bin/umount bin/uptime bin/watch bin/dumper

bin/cpuinfo:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/cpuinfo.c' $(LIBS) -o $@

bin/dumper:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/dumper.c' $(LIBS) -o $@

bin/execmac:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/execmac.c' $(LIBS) -o $@

bin/ifconfig:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/ifconfig.c' $(LIBS) -o $@

bin/ipcrm:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/ipcrm.c' $(LIBS) -o $@

bin/ipcs:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/ipcs.c' $(LIBS) -o $@

bin/klog:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/klog.c' $(LIBS) -o $@

bin/logger:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/logger.c' $(LIBS) -o $@

bin/login:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/login.c' -lgcrypt $(LIBS) -o $@

bin/lp:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/lp.c' $(LIBS) -o $@

bin/lslocks:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/lslocks.c' $(LIBS) -o $@

bin/mount:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/mount.c' $(LIBS) -o $@

bin/newgrp:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/newgrp.c' $(LIBS) -o $@

bin/ps:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/ps.c' $(LIBS) -o $@

bin/renice:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/renice.c' $(LIBS) -o $@

bin/showmem:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/showmem.c' $(LIBS) -o $@

bin/strace:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/strace.c' $(LIBS) -o $@

bin/su:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/su.c' $(LIBS) -o $@

bin/umount:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/umount.c' $(LIBS) -o $@

bin/uptime:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/uptime.c' $(LIBS) -o $@

bin/watch:
	$(MKDIR_P) "$$(dirname $@)"
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) '$(call SHESCAPE,$(SRCDIR))/source/watch.c' $(LIBS) -o $@

.PHONY: clean
clean:
	rm -rf bin/cpuinfo bin/execmac bin/ifconfig bin/klog bin/login bin/mount bin/ps \
		bin/showmem bin/strace bin/su bin/umount bin/uptime bin/watch
	rm -rf bin

# Remove files generated by configure.
.PHONY: distclean
distclean: clean
	rm -rf config.log config.status GNUmakefile

# Create a release tarball.
.PHONY: dist
dist:
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	$(MKDIR_P) "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	cp -rp '$(call SHESCAPE,$(SRCDIR))'/.git "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/
	cd "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)" && git checkout .
	cd "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)" && ./bootstrap
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.git
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.gitignore
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.github
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/autom4te.cache
	echo "$(PACKAGE_VERSION)" >"$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/version
	tar -cf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar" "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	gzip < "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar" > "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.gz"
	( bzip2 < "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar" > "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.bz2" || rm "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.bz2" )
	( xz < "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar" > "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.xz" || rm "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.xz" )
	rm "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar"
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"

# Remove ALL generated files.
.PHONY: maintainer-clean
maintainer-clean: distclean
	cd '$(call SHESCAPE,$(SRCDIR))' && rm -rf configure build-aux *'~' autom4te.cache aclocal.m4

# Install files and executables to the final locations.
.PHONY: install
install: all
	$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(bindir))'
	$(INSTALL_PROGRAM) bin/cpuinfo '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/dumper '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/execmac '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/ifconfig '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/ipcrm '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/ipcs '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/klog '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/logger '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/login '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/lp '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/lslocks '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/mount '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/newgrp '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/ps '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/renice '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/showmem '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/strace '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/su '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/umount '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/uptime '$(call SHESCAPE,$(DESTDIR)$(bindir))/'
	$(INSTALL_PROGRAM) bin/watch '$(call SHESCAPE,$(DESTDIR)$(bindir))/'

# Install and strip executables.
.PHONY: install-strip
install-strip: install
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/cpuinfo
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/dumper
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/execmac
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ifconfig
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ipcrm
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ipcs
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/klog
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/logger
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/login
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/lp
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/lslocks
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/mount
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/newgrp
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ps
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/renice
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/showmem
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/strace
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/su
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/umount
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/uptime
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))'/watch

# Uninstall previously installed files and executables.
.PHONY: uninstall
uninstall:
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/cpuinfo
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/dumper
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/execmac
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ifconfig
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ipcrm
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ipcs
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/klog
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/logger
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/login
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/lp
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/lslocks
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/mount
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/newgrp
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/ps
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/renice
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/showmem
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/strace
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/su
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/umount
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/uptime
	rm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))'/watch
